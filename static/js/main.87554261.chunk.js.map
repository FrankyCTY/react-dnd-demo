{"version":3,"sources":["initial-data.js","Task.js","Column.js","App.js","reportWebVitals.js","index.js"],"names":["initialData","tasks","id","content","columns","title","taskIds","columnOrder","Container","styled","div","props","isDragDisabled","isDragging","Handle","Task","task","index","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","Title","h3","TaskList","isDraggingOver","Column","column","droppableId","type","droppableProps","map","placeholder","App","useState","initData","setInitData","onDragEnd","result","destination","source","startCol","finishCol","startTaskIds","Array","from","splice","newStartCol","finishTaskIds","newFinishCol","newState","newTaskIds","newColumn","onDragStart","start","announce","columnId","taskId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87554261.chunk.js","sourcesContent":["const initialData = {\n  tasks: {\n    'task-1': { id: 'task-1', content: 'Take out the garbage' },\n    'task-2': { id: 'task-2', content: 'Watch my favorite show' },\n    'task-3': { id: 'task-3', content: 'Charge my phone' },\n    'task-4': { id: 'task-4', content: 'Cook dinner' },\n  },\n  columns: {\n    'column-1': {\n      id: 'column-1',\n      title: 'To do',\n      taskIds: ['task-1', 'task-2', 'task-3', 'task-4'],\n    },\n    'column-2': {\n      id: 'column-2',\n      title: 'In progress',\n      taskIds: [],\n    },\n    'column-3': {\n      id: 'column-3',\n      title: 'Done',\n      taskIds: [],\n    },\n  },\n  // Facilitate reordering of the columns\n  columnOrder: ['column-1', 'column-2', 'column-3'],\n};\n\nexport default initialData;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst Container = styled.div`\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  padding: 8px;\n  margin-bottom: 8px;\n  background-color: ${(props) =>\n    props.isDragDisabled\n      ? 'lightgrey'\n      : props.isDragging\n      ? 'lightGreen'\n      : 'white'};\n`;\n\nconst Handle = styled.div`\n  width: 20px;\n  height: 20px;\n  background-color: orange;\n  border-radius: 4px;\n  margin-right: 8px;\n`;\n\nfunction Task({ task, index }) {\n  const isDragDisabled = task.id === 'task-1';\n  return (\n    <Draggable\n      draggableId={task.id}\n      index={index}\n      isDragDisabled={isDragDisabled}\n    >\n      {(provided, snapshot) => (\n        <Container\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          isDragging={snapshot.isDragging}\n          isDragDisabled={isDragDisabled}\n        >\n          <Handle {...provided.dragHandleProps} />\n          {task.content}\n        </Container>\n      )}\n    </Draggable>\n  );\n}\n\nexport { Task };\n","import React from 'react';\nimport { Task } from './Task';\nimport styled from 'styled-components';\nimport { Droppable } from 'react-beautiful-dnd';\n\nconst Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  width: 220px;\n\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled.h3`\n  padding: 8px;\n`;\n\nconst TaskList = styled.div`\n  padding: 8px;\n  transition: background-color 0.2s ease;\n  background-color: ${(props) => (props.isDraggingOver ? 'skyblue' : 'white')};\n  flex-grow: 1;\n  min-height: 100px;\n`;\n\nfunction Column({ column, tasks }) {\n  return (\n    <Container>\n      <Title>{column.title}</Title>\n\n      <Droppable\n        droppableId={column.id}\n        // disable droppable column (can use **isDropDisabled** prop)\n        type={column.id === 'column-3' ? 'done' : 'active'}\n      >\n        {(provided, snapshot) => (\n          <TaskList\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            isDraggingOver={snapshot.isDraggingOver}\n          >\n            {tasks.map((task, index) => (\n              <Task key={task.id} task={task} index={index} />\n            ))}\n            {provided.placeholder}\n          </TaskList>\n        )}\n      </Droppable>\n    </Container>\n  );\n}\n\nexport { Column };\n","import React, { useState } from 'react';\nimport './App.css';\nimport initialData from './initial-data';\nimport { Column } from './Column';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nfunction App() {\n  const [initData, setInitData] = useState(initialData);\n\n  const onDragEnd = (result) => {\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    // position not changed\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const startCol = initData.columns[source.droppableId];\n    const finishCol = initData.columns[destination.droppableId];\n\n    // If it's the same Column\n    if (startCol === finishCol) {\n      const newTaskIds = Array.from(finishCol.taskIds);\n      // remove source item\n      newTaskIds.splice(source.index, 1);\n      // add item to destination\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...finishCol,\n        taskIds: newTaskIds,\n      };\n\n      const newState = {\n        ...initData,\n        columns: {\n          ...initData.columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n\n      setInitData(newState);\n      return;\n    }\n\n    // Different columns\n    // Moving from one list to another\n    const startTaskIds = Array.from(startCol.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStartCol = {\n      ...startCol,\n      taskIds: startTaskIds,\n    };\n\n    const finishTaskIds = Array.from(finishCol.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinishCol = {\n      ...finishCol,\n      taskIds: finishTaskIds,\n    };\n\n    const newState = {\n      ...initData,\n      columns: {\n        ...initData.columns,\n        [newStartCol.id]: newStartCol,\n        [newFinishCol.id]: newFinishCol,\n      },\n    };\n    setInitData(newState);\n  };\n\n  const onDragStart = (start, provided) => {\n    provided.announce(\n      `You have lifted the task in position ${start.source.index + 1}`\n    );\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} onDragStart={onDragStart}>\n      {initData.columnOrder.map((columnId) => {\n        const column = initData.columns[columnId];\n        const tasks = column.taskIds.map((taskId) => initData.tasks[taskId]);\n\n        return <Column key={column.id} column={column} tasks={tasks} />;\n      })}\n    </DragDropContext>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}